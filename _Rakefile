PROJECTS = %w{
  thinkerbot/configurable
  thinkerbot/shell_test
}
ROOT_DIR = File.expand_path('..', __FILE__)
GEM_DIR = File.join(ROOT_DIR, '_gems')
GEMFILE = File.join(ROOT_DIR, '_Gemfile')

def capture_sh(str)
  puts str
  `#{str}`
end

def each_project
  PROJECTS.each do |project_path|
    project_name = File.basename(project_path)
    project_dir = File.join(ROOT_DIR, '_projects', project_name)
    yield(project_path, project_name, project_dir)
  end
end

def in_each_project_dir
  each_project do |project_path, project_name, project_dir|
    Dir.chdir(project_dir) do
      yield(project_name)
    end if File.exists?(project_dir)
  end
end

#
# Dependency tasks
#

desc 'Bundle dependencies'
task :bundle do
  output = `bundle check --gemfile '#{GEMFILE}' 2>&1`
  
  unless $?.to_i == 0
    puts output
    sh "bundle install --gemfile '#{GEMFILE}' 2>&1"
    puts
  end
end

#
# Site tasks
#

desc 'Build site'
task :build => :bundle do
  Dir.chdir(ROOT_DIR) do
    capture_sh "jekyll --pygments --safe"
  end
end

#
# Project tasks
#

desc 'fetch gems for each project'
task :fetch do
  FileUtils.mkdir_p GEM_DIR

  Dir.chdir(GEM_DIR) do
    each_project do |project_path, project_name, project_dir|
      list = capture_sh "gem list -a --remote #{project_name}"

      list =~ /^#{project_name} \((.*)\)$/
      $1.to_s.split(', ').each do |version|
        unless File.exists?("#{project_name}-#{version}.gem")
          capture_sh "gem fetch #{project_name} -v #{version}"
        end
      end
    end
  end
end

desc 'clone each project'
task :clone do
  Dir.chdir(ROOT_DIR) do
    each_project do |project_path, project_name, project_dir|
      unless File.exists?(project_dir)
        capture_sh "git submodule add git@github.com:#{project_path}.git #{project_dir}"
      end
    end
  end
end

desc 'checkout gh-pages for each project'
task :checkout => :clone do
  in_each_project_dir do
    capture_sh "git checkout gh-pages"
    unless $?.exitstatus == 0
      capture_sh "git symbolic-ref HEAD refs/heads/gh-pages"
      capture_sh "rm .git/index"
      capture_sh "git clean -fdx"
      capture_sh 'echo "My GitHub Page" > index.html'
      capture_sh "git add ."
      capture_sh "git commit -a -m 'First pages commit'"
    end
  end
end

desc 'commit changes'
task :commit, :message do |task, args|
  if args.message.to_s.strip.empty?
    raise "no message specified"
  end
  each_project do |project_path, project_name, project_dir|
    site_dir = File.join(ROOT_DIR, '_site', project_name)
    FileUtils.mv File.join(project_dir, '.git'), File.join(site_dir, '.git')
    FileUtils.rm_r project_dir
    FileUtils.mv site_dir, project_dir
  end
  in_each_project_dir do |project_name|
    capture_sh "git add ."
    capture_sh "git add -u"
    capture_sh "git commit -m '#{args.message}'"
  end
end

desc 'push changes'
task :push do
  in_each_project_dir do
    capture_sh "git push --all"
  end
end
